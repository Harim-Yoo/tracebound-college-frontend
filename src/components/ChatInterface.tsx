import React, { useState, useRef, useEffect } from 'react';
import { Send, Bot, User, Download, AlertTriangle, CheckCircle, Camera, FileText, Copy } from 'lucide-react';
import { ChatMessage, Subject } from '../types';
import { ImageUpload } from './ImageUpload';

interface ChatInterfaceProps {
  subject: Subject;
  messages: ChatMessage[];
  onAddMessage: (message: ChatMessage) => void;
  onExportSession: () => void;
}

export function ChatInterface({ subject, messages, onAddMessage, onExportSession }: ChatInterfaceProps) {
  const [input, setInput] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [showImageUpload, setShowImageUpload] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const calculateHallucinationScore = (reasoning: string, audit: string): number => {
    // Simple heuristic for hallucination detection
    let score = 0;
    
    // Check for proper axiom citations
    const axiomCitations = (reasoning.match(/axiom|theorem|definition/gi) || []).length;
    if (axiomCitations < 2) score += 20;
    
    // Check for proper step structure
    const stepCount = (reasoning.match(/Step \d+:/g) || []).length;
    if (stepCount < 2) score += 15;
    
    // Check for intermediate checks
    const checkCount = (reasoning.match(/Intermediate Formal Check:/g) || []).length;
    if (checkCount < stepCount) score += 25;
    
    // Check audit quality
    if (audit.includes('No audit violations') || audit.includes('excellent') || audit.includes('strong')) {
      score -= 10;
    }
    if (audit.includes('gap') || audit.includes('error') || audit.includes('violation')) {
      score += 30;
    }
    
    return Math.max(0, Math.min(100, score));
  };

  const handleImageText = (extractedText: string) => {
    setInput(prev => prev + (prev ? '\n' : '') + extractedText);
    setShowImageUpload(false);
  };

  const convertToLatex = (content: string): string => {
    let latex = content;
    
    // Convert markdown headers to LaTeX sections
    latex = latex.replace(/## 🧱 Assumptions/g, '\\section{Assumptions}');
    latex = latex.replace(/## 🧠 Logical Steps/g, '\\section{Logical Steps}');
    latex = latex.replace(/## 🔍 Self-Audit Result/g, '\\section{Self-Audit Result}');
    latex = latex.replace(/## ✅ Final Result/g, '\\section{Final Result}');
    
    // Convert step headers
    latex = latex.replace(/\*\*Step (\d+):\*\*/g, '\\subsection{Step $1}');
    
    // Convert intermediate checks
    latex = latex.replace(/\*\*Intermediate Formal Check:\*\*/g, '\\textbf{Intermediate Formal Check:}');
    
    // Convert math expressions - keep LaTeX math as is
    // Already in LaTeX format, so no conversion needed for \( \) and \[ \]
    
    // Convert bold text
    latex = latex.replace(/\*\*(.*?)\*\*/g, '\\textbf{$1}');
    
    // Convert italic text
    latex = latex.replace(/\*(.*?)\*/g, '\\textit{$1}');
    
    // Remove mock API notes
    latex = latex.replace(/\*\*Note:\*\* This response was generated by Mock API.*$/gm, '');
    
    // Clean up extra whitespace
    latex = latex.replace(/\n\n\n+/g, '\n\n');
    
    return latex.trim();
  };

  const exportToLatex = (message: ChatMessage) => {
    if (!message.reasoning) return;
    
    const latexContent = convertToLatex(message.reasoning);
    
    const fullLatexDocument = `\\documentclass{article}
\\usepackage{amsmath}
\\usepackage{amssymb}
\\usepackage{amsthm}
\\usepackage[utf8]{inputenc}
\\usepackage[margin=1in]{geometry}

\\title{Mathematical Solution - ${subject}}
\\author{Generated by Tracebound College}
\\date{\\today}

\\begin{document}

\\maketitle

${latexContent}

\\end{document}`;

    const blob = new Blob([fullLatexDocument], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `solution-${subject.replace(/\s+/g, '-').toLowerCase()}-${new Date().toISOString().split('T')[0]}.tex`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  const copyLatexToClipboard = async (message: ChatMessage) => {
    if (!message.reasoning) return;
    
    const latexContent = convertToLatex(message.reasoning);
    
    try {
      await navigator.clipboard.writeText(latexContent);
      // You could add a toast notification here
      alert('LaTeX code copied to clipboard!');
    } catch (err) {
      console.error('Failed to copy to clipboard:', err);
      alert('Failed to copy to clipboard');
    }
  };
  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!input.trim() || isLoading) return;

    console.log('🎬 === CHAT SUBMIT START ===');
    console.log('📝 User input:', {
      length: input.trim().length,
      preview: input.trim().substring(0, 50) + '...',
      subject,
      timestamp: new Date().toISOString()
    });

    const userMessage: ChatMessage = {
      id: Date.now().toString(),
      type: 'user',
      content: input.trim(),
      timestamp: Date.now(),
      subject
    };

    onAddMessage(userMessage);
    setInput('');
    setIsLoading(true);

    try {
      // 디버깅을 위한 네트워크 상태 체크
      console.log('🌍 Environment check:', {
        NODE_ENV: process.env.NODE_ENV,
        location: window.location.href,
        userAgent: navigator.userAgent.substring(0, 100),
        online: navigator.onLine,
        connection: (navigator as any).connection?.effectiveType || 'unknown',
        language: navigator.language,
        platform: navigator.platform
      });
      
      const { callBackendAPI, callBackendAudit } = await import('../utils/backendApi');
      const reasoningResult = await callBackendAPI(input.trim(), subject);
      
      console.log('📥 Reasoning result:', reasoningResult.success ? 'Success' : 'Failed');
      
      if (reasoningResult.success && reasoningResult.reasoning) {
        console.log('🔍 Starting audit API call...');
        const auditResult = await callBackendAudit(reasoningResult.reasoning);
        console.log('📥 Audit result:', auditResult.success ? 'Success' : 'Failed');
        const audit = auditResult.success ? auditResult.audit || '' : '';
        
        const hallucinationScore = calculateHallucinationScore(reasoningResult.reasoning, audit);
        
        const assistantMessage: ChatMessage = {
          id: (Date.now() + 1).toString(),
          type: 'assistant',
          content: reasoningResult.reasoning,
          timestamp: Date.now(),
          subject,
          reasoning: reasoningResult.reasoning,
          audit,
          hallucinationScore
        };

        onAddMessage(assistantMessage);
      } else {
        console.log('❌ API call failed:', {
          success: reasoningResult.success,
          error: reasoningResult.error,
          hasReasoning: !!reasoningResult.reasoning
        });
        
        const errorMessage: ChatMessage = {
          id: (Date.now() + 1).toString(),
          type: 'assistant',
          content: `❌ **Backend API Error**\n\n**Error Details:** ${reasoningResult.error || 'Failed to generate reasoning'}\n\n**Troubleshooting:**\n- Check your internet connection\n- The backend server may be sleeping (first request takes 30-60 seconds)\n- Try again in a few moments\n\n**Technical Info:**\n- Environment: ${process.env.NODE_ENV || 'development'}\n- Timestamp: ${new Date().toISOString()}`,
          timestamp: Date.now(),
          subject
        };
        onAddMessage(errorMessage);
      }
    } catch (error) {
      console.error('🚨 Unexpected error in handleSubmit:', {
        name: error?.name,
        message: error?.message,
        stack: error?.stack
      });
      
      console.error('Error stack:', error?.stack);
      
      // 더 자세한 에러 메시지 표시
      const errorMessage: ChatMessage = {
        id: (Date.now() + 1).toString(),
        type: 'assistant',
        content: `❌ **Unexpected Error**\n\n**Error Type:** ${error?.name || 'Unknown'}\n**Error Message:** ${error?.message || 'Something went wrong'}\n\n**What to try:**\n1. Refresh the page and try again\n2. Check browser console for more details\n3. Ensure you have a stable internet connection\n4. Wait a few minutes and retry (backend may be starting up)\n\n**Technical Details:**\n- Error occurred at: ${new Date().toISOString()}\n- Browser: ${navigator.userAgent.split(' ')[0]}`,
        timestamp: Date.now(),
        subject
      };
      onAddMessage(errorMessage);
    } finally {
      setIsLoading(false);
    }
  };

  const formatContent = (content: string) => {
    return content.split('\n').map((line, index) => {
      if (line.trim() === '') return <br key={index} />;
      
      // Handle LaTeX math expressions - convert to readable format
      if (line.includes('\\(') && line.includes('\\)')) {
        const mathContent = line.replace(/\\?\\\(/g, '').replace(/\\?\\\)/g, '');
        return (
          <p key={index} className="text-gray-700 mb-3 leading-relaxed bg-blue-50 p-3 rounded-lg border-l-4 border-blue-400">
            <span className="text-sm text-blue-600 font-medium">Math: </span>
            <span className="font-mono text-gray-800">{mathContent}</span>
          </p>
        );
      }
      
      if (line.includes('\\[') && line.includes('\\]')) {
        const mathContent = line.replace(/\\?\\\[/g, '').replace(/\\?\\\]/g, '');
        return (
          <div key={index} className="text-gray-700 mb-4 leading-relaxed bg-blue-50 p-4 rounded-lg border border-blue-200 text-center">
            <div className="text-sm text-blue-600 font-medium mb-2">Mathematical Expression:</div>
            <div className="font-mono text-gray-800 text-lg">{mathContent}</div>
          </div>
        );
      }
      
      // Handle step formatting
      if (line.startsWith('Step ')) {
        return (
          <div key={index} className="bg-blue-50 border-l-4 border-blue-400 p-4 mb-4 rounded-r">
            <h4 className="font-semibold text-blue-800 mb-2">{line}</h4>
          </div>
        );
      }
      
      if (line.startsWith('Intermediate Formal Check:')) {
        return (
          <div key={index} className="bg-green-50 border-l-4 border-green-400 p-3 mb-3 rounded-r ml-4">
            <p className="text-green-700 text-sm">
              <CheckCircle className="w-4 h-4 inline mr-2" />
              {line.replace('Intermediate Formal Check:', '').trim()}
            </p>
          </div>
        );
      }
      
      if (line.startsWith('**') && line.endsWith('**')) {
        return (
          <h3 key={index} className="font-bold text-xl text-gray-800 mt-6 mb-3 text-purple-700">
            {line.slice(2, -2)}
          </h3>
        );
      }
      
      return (
        <p key={index} className="text-gray-600 mb-3 leading-relaxed">
          {line}
        </p>
      );
    });
  };

  const getHallucinationColor = (score: number) => {
    if (score <= 20) return 'bg-green-500';
    if (score <= 40) return 'bg-yellow-500';
    if (score <= 60) return 'bg-orange-500';
    return 'bg-red-500';
  };

  const getHallucinationLabel = (score: number) => {
    if (score <= 20) return 'Excellent';
    if (score <= 40) return 'Good';
    if (score <= 60) return 'Caution';
    return 'High Risk';
  };

  return (
    <div className="flex flex-col h-full">
      {/* Header */}
      <div className="flex items-center justify-between p-4 border-b border-gray-200 bg-white">
        <div className="flex items-center gap-3">
          <Bot className="w-6 h-6 text-purple-600" />
          <h2 className="text-lg font-semibold text-gray-800">
            {subject} Session
          </h2>
        </div>
        <button
          onClick={onExportSession}
          className="flex items-center gap-2 px-4 py-2 bg-purple-600 text-white rounded-lg hover:bg-purple-700 transition-colors"
        >
          <Download className="w-4 h-4" />
          Export
        </button>
      </div>

      {/* Messages */}
      <div className="flex-1 overflow-y-auto p-4 space-y-4">
        {messages.length === 0 && (
          <div className="text-center py-12">
            <Bot className="w-12 h-12 text-gray-400 mx-auto mb-4" />
            <p className="text-gray-500 text-lg">Start a conversation about {subject}</p>
            <p className="text-gray-400 text-sm mt-2">Ask me to solve problems, prove theorems, or explain concepts</p>
          </div>
        )}

        {messages.map((message) => (
          <div key={message.id} className={`flex gap-3 ${message.type === 'user' ? 'justify-end' : 'justify-start'}`}>
            <div className={`flex gap-3 max-w-4xl ${message.type === 'user' ? 'flex-row-reverse' : 'flex-row'}`}>
              <div className={`w-8 h-8 rounded-full flex items-center justify-center ${
                message.type === 'user' ? 'bg-blue-500' : 'bg-purple-500'
              }`}>
                {message.type === 'user' ? (
                  <User className="w-4 h-4 text-white" />
                ) : (
                  <Bot className="w-4 h-4 text-white" />
                )}
              </div>
              
              <div className={`rounded-2xl p-4 ${
                message.type === 'user' 
                  ? 'bg-blue-500 text-white' 
                  : 'bg-white border border-gray-200'
              }`}>
                {message.type === 'user' ? (
                  <p className="whitespace-pre-wrap">{message.content}</p>
                ) : (
                  <div>
                    {/* Hallucination Score Bar */}
                    {message.hallucinationScore !== undefined && (
                      <div className="mb-4 p-3 bg-gray-50 rounded-lg">
                        <div className="flex items-center justify-between mb-2">
                          <span className="text-sm font-medium text-gray-700">Reliability Score</span>
                          <span className={`text-sm font-semibold ${
                            message.hallucinationScore <= 20 ? 'text-green-600' :
                            message.hallucinationScore <= 40 ? 'text-yellow-600' :
                            message.hallucinationScore <= 60 ? 'text-orange-600' : 'text-red-600'
                          }`}>
                            {getHallucinationLabel(message.hallucinationScore)}
                          </span>
                        </div>
                        <div className="w-full bg-gray-200 rounded-full h-2">
                          <div
                            className={`h-2 rounded-full transition-all duration-300 ${getHallucinationColor(message.hallucinationScore)}`}
                            style={{ width: `${100 - message.hallucinationScore}%` }}
                          />
                        </div>
                        <div className="flex items-center gap-1 mt-2 text-xs text-gray-600">
                          {message.hallucinationScore <= 20 ? (
                            <CheckCircle className="w-3 h-3 text-green-500" />
                          ) : (
                            <AlertTriangle className="w-3 h-3 text-orange-500" />
                          )}
                          <span>
                            {message.hallucinationScore <= 20 
                              ? 'High confidence in mathematical reasoning'
                              : 'Review reasoning carefully for potential gaps'
                            }
                          </span>
                        </div>
                      </div>
                    )}
                    
                    {/* Main Content */}
                    <div className="prose max-w-none">
                      {formatContent(message.content)}
                    </div>
                    
                    {/* LaTeX Export Options */}
                    {message.reasoning && (
                      <div className="mt-4 p-3 bg-blue-50 rounded-lg border border-blue-200">
                        <div className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            <FileText className="w-4 h-4 text-blue-600" />
                            <span className="text-sm font-medium text-blue-800">LaTeX Export</span>
                          </div>
                          <div className="flex gap-2">
                            <button
                              onClick={() => copyLatexToClipboard(message)}
                              className="flex items-center gap-1 px-3 py-1 bg-blue-600 text-white text-xs rounded-lg hover:bg-blue-700 transition-colors"
                            >
                              <Copy className="w-3 h-3" />
                              Copy LaTeX
                            </button>
                            <button
                              onClick={() => exportToLatex(message)}
                              className="flex items-center gap-1 px-3 py-1 bg-green-600 text-white text-xs rounded-lg hover:bg-green-700 transition-colors"
                            >
                              <Download className="w-3 h-3" />
                              Download .tex
                            </button>
                          </div>
                        </div>
                        <p className="text-xs text-blue-600 mt-2">
                          Export this solution as LaTeX code for use in academic papers or assignments
                        </p>
                      </div>
                    )}
                    
                    {/* Audit Section */}
                    {message.audit && (
                      <details className="mt-4 group">
                        <summary className="cursor-pointer p-3 bg-teal-50 rounded-lg border border-teal-200 hover:bg-teal-100 transition-colors">
                          <span className="font-semibold text-teal-800 flex items-center gap-2">
                            <CheckCircle className="w-4 h-4" />
                            Self-Audit Result
                            <span className="text-xs text-teal-600 ml-2">(Click to expand)</span>
                          </span>
                        </summary>
                        <div className="mt-2 p-4 bg-teal-50 rounded-lg border border-teal-200">
                          <div className="prose max-w-none text-sm">
                            {formatContent(message.audit)}
                          </div>
                        </div>
                      </details>
                    )}
                  </div>
                )}
              </div>
            </div>
          </div>
        ))}

        {isLoading && (
          <div className="flex gap-3">
            <div className="w-8 h-8 rounded-full bg-purple-500 flex items-center justify-center">
              <Bot className="w-4 h-4 text-white" />
            </div>
            <div className="bg-white border border-gray-200 rounded-2xl p-4">
              <div className="flex items-center gap-2">
                <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce"></div>
                <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                <div className="w-2 h-2 bg-purple-500 rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                <span className="text-gray-500 ml-2">Generating reasoning...</span>
              </div>
            </div>
          </div>
        )}

        <div ref={messagesEndRef} />
      </div>

      {/* Input */}
      <div className="p-4 border-t border-gray-200 bg-white">
       
        {showImageUpload && (
          <div className="mb-4">
            <ImageUpload 
              onTextExtracted={handleImageText}
              onClose={() => setShowImageUpload(false)}
            />
          </div>
        )}
        
        <form onSubmit={handleSubmit} className="flex gap-3">
          <button
            type="button"
            onClick={() => setShowImageUpload(!showImageUpload)}
            className="px-4 py-3 bg-blue-600 text-white rounded-xl hover:bg-blue-700 transition-colors flex items-center gap-2"
            title="Upload image for OCR"
          >
            <Camera className="w-4 h-4" />
          </button>
          <input
            type="text"
            value={input}
            onChange={(e) => setInput(e.target.value)}
            placeholder={`Ask a ${subject} question...`}
            className="flex-1 px-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-purple-500 focus:border-purple-500 outline-none"
            disabled={isLoading}
          />
          <button
            type="submit"
            disabled={!input.trim() || isLoading}
            className="px-6 py-3 bg-purple-600 text-white rounded-xl hover:bg-purple-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors flex items-center gap-2"
          >
            <Send className="w-4 h-4" />
            Send
          </button>
        </form>
      </div>
    </div>
  );
}
